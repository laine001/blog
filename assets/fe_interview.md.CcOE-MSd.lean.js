import{_ as n,C as l,c as p,o,ad as e,G as t}from"./chunks/framework.C6Isdag-.js";const u=JSON.parse('{"title":"前端知识点总结","description":"","frontmatter":{},"headers":[],"relativePath":"fe/interview.md","filePath":"fe/interview.md","lastUpdated":1739259545000}'),c={name:"fe/interview.md"};function r(B,s,i,y,C,F){const a=l("git-talk");return o(),p("div",null,[s[0]||(s[0]=e(`<h1 id="前端知识点总结" tabindex="-1">前端知识点总结 <a class="header-anchor" href="#前端知识点总结" aria-label="Permalink to &quot;前端知识点总结&quot;">​</a></h1><img class="post-img" src="https://www4.bing.com//th?id=OHR.PontdArcole_ZH-CN5348049357_1920x1080.jpg&amp;rf=LaDigue_1920x1080.jpg"><h2 id="js-浏览器" tabindex="-1">js/浏览器 <a class="header-anchor" href="#js-浏览器" aria-label="Permalink to &quot;js/浏览器&quot;">​</a></h2><h3 id="_1-js-垃圾回收与-v8-垃圾回收机制" tabindex="-1">1. JS 垃圾回收与 V8 垃圾回收机制 <a class="header-anchor" href="#_1-js-垃圾回收与-v8-垃圾回收机制" aria-label="Permalink to &quot;1. JS 垃圾回收与 V8 垃圾回收机制&quot;">​</a></h3><blockquote><p>编写 JavaScript 程序时，开发者不需要手工跟踪内存的使用情况，只要按照标准写 JavaScript 代码，JavaScript 程序运行所需的内存分配以及无用内存的回收完全是自动管理。</p></blockquote><h4 id="javascript-v8-中自动垃圾回收机制的原理为" tabindex="-1">JavaScript V8 中自动垃圾回收机制的原理为： <a class="header-anchor" href="#javascript-v8-中自动垃圾回收机制的原理为" aria-label="Permalink to &quot;JavaScript V8 中自动垃圾回收机制的原理为：&quot;">​</a></h4><ul><li>v8 垃圾回收机制使用的是标记清除法 <blockquote><ol><li>找出那些不再使用的变量，然后释放其占用的内存。</li><li>垃圾收集器会按照固定的时间间隔(或预定的收集时间) 周期性 地执行此操作。</li></ol></blockquote></li><li>引用计数法</li></ul><blockquote><p>含义为跟踪记录每个值被引用的次数，当声明一个变量并将一个引用类型值赋给该变量时，则这个值的引用次数为 1，如果同一个值又被赋给另一个变量，该值的引用次数加 1，如果包含这个值引用的变量又取得了另外一个值，则这个值得引用次数减 1.当引用次数为 0 时回收其占用得内存空间。</p></blockquote><h3 id="_2-js-的事件循环机制" tabindex="-1">2. js 的事件循环机制 <a class="header-anchor" href="#_2-js-的事件循环机制" aria-label="Permalink to &quot;2. js 的事件循环机制&quot;">​</a></h3><blockquote><p>JavaScript 有一个 main thread 主线程和 call-stack 调用栈（执行栈），所有的任务都会放到调用栈中等待主线程执行。 任务进入执行栈之后会判断一下是否是同步任务，若是同步任务就会进入主线程执行；异步任务就会到事件表里面注册回调函数到事件队列。</p></blockquote><ol><li>同步和异步任务分别进入不同的执行”场所”，同步的进入主线程，异步的进入 Event Table 并注册函数</li><li>当指定的事情完成时，Event Table 会将这个函数移入 Event Queue</li><li>主线程内的任务执行完毕为空，会去 Event Queue 读取对应的函数，进入主线程执行。</li><li>上述过程会不断重复，也就是常说的 Event Loop(事件循环)</li></ol><ul><li>宏任务：整体代码 script、setTimeout、setInterval、setImmediate, I/O, UI rendering。</li><li>微任务：原生 Promise 中 then 方法、process.nextTick、MutationObserver, Object.observe</li></ul><p><a href="https://juejin.cn/post/6844904079353708557" target="_blank" rel="noreferrer">事件循环机制</a></p><h3 id="_3-什么是闭包-为什么有闭包概念-存在什么问题-适用什么应用场景" tabindex="-1">3. 什么是闭包，为什么有闭包概念，存在什么问题，适用什么应用场景 <a class="header-anchor" href="#_3-什么是闭包-为什么有闭包概念-存在什么问题-适用什么应用场景" aria-label="Permalink to &quot;3. 什么是闭包，为什么有闭包概念，存在什么问题，适用什么应用场景&quot;">​</a></h3><blockquote><p>闭包就是能够读取其他函数内部变量的函数。使用不当造成内存泄露</p></blockquote><ol><li>函数嵌套函数</li><li>函数内部可以引用函数外部的参数和变量</li><li>参数和变量不会被垃圾回收机制回收</li></ol><h3 id="_4-讲一下原型链" tabindex="-1">4. 讲一下原型链 <a class="header-anchor" href="#_4-讲一下原型链" aria-label="Permalink to &quot;4. 讲一下原型链&quot;">​</a></h3><blockquote><p>每个对象都存在一个<strong>proto</strong>属性指向其构造函数的 prototype 属性值</p></blockquote><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>var a = {}</span></span>
<span class="line"><span>a.__proto__ === Object.prototype // true</span></span></code></pre></div><h3 id="_5-浏览器渲染" tabindex="-1">5. 浏览器渲染 <a class="header-anchor" href="#_5-浏览器渲染" aria-label="Permalink to &quot;5. 浏览器渲染&quot;">​</a></h3><blockquote><p>reflow（回流）：当浏览器发现某个部分发生了变化影响了布局，这个时候就需要倒回去重新渲染，这个过程就叫做 reflow； repaint（重绘）：当改变某个元素的背景色、字体颜色、边框颜色等不影响布局的属性时，屏幕的一部分需要重画，但是元素的几何尺寸和位置都没有发现变化；</p></blockquote><ol><li>浏览器将获取的 HTML 文档解析成 DOM 树；</li><li>处理 CSS 标记，构成层叠样式表模型（CSSOM）；</li><li>将 DOM 和 CSSOM 合并为渲染树（rendering tree）；</li><li>渲染树的每个元素的内容都是计算过的，称之为 布局 layout；</li><li>将渲染树上的各个节点绘制到屏幕上，称之为 绘制 painting； <a href="https://zhuanlan.zhihu.com/p/212220203" target="_blank" rel="noreferrer">浏览器渲染过程简析</a></li></ol><h3 id="_6-手动实现浅拷贝、深拷贝" tabindex="-1">6. 手动实现浅拷贝、深拷贝 <a class="header-anchor" href="#_6-手动实现浅拷贝、深拷贝" aria-label="Permalink to &quot;6. 手动实现浅拷贝、深拷贝&quot;">​</a></h3><blockquote><p>浅拷贝：重新在堆中创建内存，拷贝前后对象的基本数据类型互不影响，但对象的引用类型因为还是共享同一块内存，会相互影响。 深拷贝：从堆内存中开辟一个新的区域存放新对象，对对象中的子对象进行递归拷贝，前后的值互不影响。</p></blockquote><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 浅拷贝</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> clone</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">target</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">  let</span><span style="color:#E06C75;"> cloneTarget</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {}</span></span>
<span class="line"><span style="color:#C678DD;">  for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> key</span><span style="color:#C678DD;"> in</span><span style="color:#E06C75;"> target</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">    cloneTarget</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> target</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#C678DD;">  return</span><span style="color:#E06C75;"> cloneTarget</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 只考虑{}和基本类型</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> deepClone</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">target</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">  if</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">typeof</span><span style="color:#E06C75;"> target</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &#39;object&#39;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> cloneTarget</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {}</span></span>
<span class="line"><span style="color:#C678DD;">    for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> key</span><span style="color:#C678DD;"> in</span><span style="color:#E06C75;"> target</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">      cloneTarget</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> deepClone</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">target</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">])</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E06C75;"> cloneTarget</span></span>
<span class="line"><span style="color:#ABB2BF;">  } </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E06C75;"> target</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 复杂深拷贝</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> deepClone2</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">target</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">hash</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> WeakMap</span><span style="color:#ABB2BF;">()) {</span></span>
<span class="line"><span style="color:#C678DD;">  if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">target</span><span style="color:#56B6C2;"> ===</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">return</span><span style="color:#E06C75;"> target</span></span>
<span class="line"><span style="color:#C678DD;">  if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">target</span><span style="color:#C678DD;"> instanceof</span><span style="color:#E5C07B;"> Date</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">return</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Date</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">target</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">  if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">target</span><span style="color:#C678DD;"> instanceof</span><span style="color:#E5C07B;"> RegExp</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">return</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> RegExp</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">target</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">  if</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">typeof</span><span style="color:#E06C75;"> target</span><span style="color:#56B6C2;"> !==</span><span style="color:#98C379;"> &#39;object&#39;</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">return</span><span style="color:#E06C75;"> target</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 对象</span></span>
<span class="line"><span style="color:#C678DD;">  let</span><span style="color:#E06C75;"> cloneObj</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> target</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">constructor</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#C678DD;">  for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> key</span><span style="color:#C678DD;"> in</span><span style="color:#E06C75;"> target</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">target</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">hasOwnProperty</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#E06C75;">      cloneObj</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> deepClone2</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">target</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">])</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#C678DD;">  return</span><span style="color:#E06C75;"> cloneObj</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre></div><h3 id="_7-手动实现防抖节流函数" tabindex="-1">7. 手动实现防抖节流函数 <a class="header-anchor" href="#_7-手动实现防抖节流函数" aria-label="Permalink to &quot;7. 手动实现防抖节流函数&quot;">​</a></h3><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 防抖</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// keyup事件、resize scroll</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> debounce</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">fn</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">delay</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">scope</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">  let</span><span style="color:#E06C75;"> timer</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> null</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 返回函数对debounce作用域形成闭包</span></span>
<span class="line"><span style="color:#C678DD;">  return</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // setTimeout()中用到函数环境总是window,故需要当前环境的副本；</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> context</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> scope</span><span style="color:#56B6C2;"> ||</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">      args</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> arguments</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 如果事件被触发，清除timer并重新开始计时</span></span>
<span class="line"><span style="color:#61AFEF;">    clearTimeout</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">timer</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E06C75;">    timer</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> setTimeout</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#E5C07B;">      fn</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">apply</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">context</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">args</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    }, </span><span style="color:#E06C75;">delay</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 节流</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> throttle</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">fn</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">threshold</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">scope</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">  let</span><span style="color:#E06C75;"> timer</span></span>
<span class="line"><span style="color:#C678DD;">  let</span><span style="color:#E06C75;"> prev</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Date</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">now</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#C678DD;">  return</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> context</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> scope</span><span style="color:#56B6C2;"> ||</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">      args</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> arguments</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> now</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Date</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">now</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">now</span><span style="color:#56B6C2;"> -</span><span style="color:#E06C75;"> prev</span><span style="color:#56B6C2;"> &gt;</span><span style="color:#E06C75;"> threshold</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">      prev</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> now</span></span>
<span class="line"><span style="color:#E5C07B;">      fn</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">apply</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">context</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">args</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> throttle2</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">fn</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">threshold</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">scope</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">  let</span><span style="color:#E06C75;"> timer</span></span>
<span class="line"><span style="color:#C678DD;">  return</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> context</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> scope</span><span style="color:#56B6C2;"> ||</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">      args</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> arguments</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">timer</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">      timer</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> setTimeout</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#E5C07B;">        fn</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">apply</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">context</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">args</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E06C75;">        timer</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> null</span></span>
<span class="line"><span style="color:#ABB2BF;">      }, </span><span style="color:#E06C75;">threshold</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre></div><h3 id="_8-new-操作符过程发生了什么" tabindex="-1">8. new 操作符过程发生了什么 <a class="header-anchor" href="#_8-new-操作符过程发生了什么" aria-label="Permalink to &quot;8. new 操作符过程发生了什么&quot;">​</a></h3><ol><li>创建一个空对象</li><li>设置原型链。把构造函数的 prototype 属性 作为空对象的原型(同时也有了 prototype 的方法，例如 this.age 就是用到了 prototype 的 this 这个方法)</li><li>改变 this 指向。this 赋值给这个空对象，执行构造函数函数，完成赋值</li><li>如果函数没有返回值 就返回这个 this 对象</li></ol><h3 id="_9-为什么会有跨域、怎么解决" tabindex="-1">9. 为什么会有跨域、怎么解决 <a class="header-anchor" href="#_9-为什么会有跨域、怎么解决" aria-label="Permalink to &quot;9. 为什么会有跨域、怎么解决&quot;">​</a></h3><blockquote><p>浏览器的同源策略</p></blockquote><ul><li>服务端设置允许跨域</li><li>nginx 配置代理</li><li>jsonp 请求</li></ul><h3 id="_10-图片压缩原理" tabindex="-1">10. 图片压缩原理 <a class="header-anchor" href="#_10-图片压缩原理" aria-label="Permalink to &quot;10. 图片压缩原理&quot;">​</a></h3><blockquote><p>canvas drawImage</p></blockquote><h3 id="_11-函数参数为外部的一个对象-函数内部删除对象的某个属性-元数据会不会改变" tabindex="-1">11. 函数参数为外部的一个对象，函数内部删除对象的某个属性，元数据会不会改变 <a class="header-anchor" href="#_11-函数参数为外部的一个对象-函数内部删除对象的某个属性-元数据会不会改变" aria-label="Permalink to &quot;11. 函数参数为外部的一个对象，函数内部删除对象的某个属性，元数据会不会改变&quot;">​</a></h3><blockquote><p>会，引用类型</p></blockquote><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> data</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">  a</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> func</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">data</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">  data</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">a</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 2</span><span style="color:#7F848E;font-style:italic;"> // delete data.a</span></span>
<span class="line"><span style="color:#E5C07B;">  console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;in&#39;</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// { a: 2 }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#61AFEF;">func</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;out&#39;</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// { a: 2 }</span></span></code></pre></div><h3 id="_12-继承-手写-class-继承" tabindex="-1">12. 继承（手写 class 继承） <a class="header-anchor" href="#_12-继承-手写-class-继承" aria-label="Permalink to &quot;12. 继承（手写 class 继承）&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Person</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">  constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">age</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> name</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">age</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> age</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#61AFEF;">  sayHello</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`hello </span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">name</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> men</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> Person</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">  constuctor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">age</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;font-style:italic;">    super</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> xiaohong</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Person</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;小红&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">18</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E5C07B;">xiaohong</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sayHello</span><span style="color:#ABB2BF;">() </span><span style="color:#7F848E;font-style:italic;">// hello 小红</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> xiaogang</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> men</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;小刚&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E5C07B;">xiaogang</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sayHello</span><span style="color:#ABB2BF;">()</span></span></code></pre></div><h3 id="_13-bind、apply、call-的区别与作用" tabindex="-1">13. bind、apply、call 的区别与作用 <a class="header-anchor" href="#_13-bind、apply、call-的区别与作用" aria-label="Permalink to &quot;13. bind、apply、call 的区别与作用&quot;">​</a></h3><ul><li>apply 接受两个参数，第一个参数是 this 的指向，第二个参数是函数接受的参数，以数组的形式传入，且当第一个参数为 null、undefined 的时候，默认指向 window(在浏览器中)，使用 apply 方法改变 this 指向后原函数会立即执行，且此方法只是临时改变 thi 指向一次。</li><li>call 方法的第一个参数也是 this 的指向，后面传入的是一个参数列表（注意和 apply 传参的区别）。当一个参数为 null 或 undefined 的时候，表示指向 window（在浏览器中），和 apply 一样，call 也只是临时改变一次 this 指向，并立即执行。</li><li>bind 方法和 call 很相似，第一参数也是 this 的指向，后面传入的也是一个参数列表(但是这个参数列表可以分多次传入，call 则必须一次性传入所有参数)，但是它改变 this 指向后不会立即执行，而是返回一个永久改变 this 指向的函数。</li></ul><h3 id="_14-promise-简述与原理" tabindex="-1">14. Promise 简述与原理 <a class="header-anchor" href="#_14-promise-简述与原理" aria-label="Permalink to &quot;14. Promise 简述与原理&quot;">​</a></h3><h3 id="_15-手动实现-map-函数" tabindex="-1">15. 手动实现 map 函数 <a class="header-anchor" href="#_15-手动实现-map-函数" aria-label="Permalink to &quot;15. 手动实现 map 函数&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B;">Array</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">map2</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">callback</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // map 要返回的结果</span></span>
<span class="line"><span style="color:#C678DD;">  const</span><span style="color:#E5C07B;"> result</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> []</span></span>
<span class="line"><span style="color:#C678DD;">  for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 执行callback 函数 并传入数组的值</span></span>
<span class="line"><span style="color:#E5C07B;">    result</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">callback</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">], </span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#C678DD;">  return</span><span style="color:#E06C75;"> result</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> arr</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> arr2</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> arr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">map2</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">item</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E06C75;"> item</span><span style="color:#56B6C2;"> *</span><span style="color:#D19A66;"> 2</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">arr2</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// [2, 4, 6]</span></span></code></pre></div><h2 id="vue2" tabindex="-1">vue2 <a class="header-anchor" href="#vue2" aria-label="Permalink to &quot;vue2&quot;">​</a></h2><h3 id="_1-vue-双向绑定" tabindex="-1">1. Vue 双向绑定 <a class="header-anchor" href="#_1-vue-双向绑定" aria-label="Permalink to &quot;1. Vue 双向绑定&quot;">​</a></h3><blockquote><p>Object.defineProperty</p></blockquote><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;!</span><span style="color:#E06C75;">DOCTYPE</span><span style="color:#D19A66;"> html</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">html</span><span style="color:#D19A66;"> lang</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;en&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">script</span><span style="color:#D19A66;"> src</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;https://cdn.bootcss.com/vue/2.5.16/vue.js&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;box&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">      &lt;</span><span style="color:#E06C75;">new-input</span><span style="color:#D19A66;"> v-bind:name.sync</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;name&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">new-input</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">      {{name}}</span></span>
<span class="line"><span style="color:#ABB2BF;">      &lt;</span><span style="color:#E06C75;">input</span><span style="color:#D19A66;"> type</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;text&quot;</span><span style="color:#D19A66;"> v-model</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;name&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#E5C07B;">      Vue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">component</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;new-input&#39;</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#E06C75;">        props</span><span style="color:#ABB2BF;">: [</span><span style="color:#98C379;">&#39;name&#39;</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#61AFEF;">        data</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#C678DD;">          return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">            newName</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">          }</span></span>
<span class="line"><span style="color:#ABB2BF;">        },</span></span>
<span class="line"><span style="color:#E06C75;">        template</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">\`&lt;label&gt;&lt;input type=&quot;text&quot; @keyup=&quot;changeName&quot;</span></span>
<span class="line"><span style="color:#98C379;">        v-model=&quot;newName&quot; /&gt; 你的名字：&lt;/label&gt;\`</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">        methods</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#61AFEF;">          changeName</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#E5C07B;">            this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">$emit</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;update:name&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">newName</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">          },</span></span>
<span class="line"><span style="color:#ABB2BF;">        },</span></span>
<span class="line"><span style="color:#E06C75;">        watch</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#61AFEF;">          name</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">v</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">            this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">newName</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> v</span></span>
<span class="line"><span style="color:#ABB2BF;">          },</span></span>
<span class="line"><span style="color:#ABB2BF;">        },</span></span>
<span class="line"><span style="color:#ABB2BF;">      })</span></span>
<span class="line"><span style="color:#C678DD;">      new</span><span style="color:#61AFEF;"> Vue</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">        el</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;#box&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">        data</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">          name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;nick&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">        },</span></span>
<span class="line"><span style="color:#ABB2BF;">      })</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;/</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">html</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre></div><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;!</span><span style="color:#E06C75;">DOCTYPE</span><span style="color:#D19A66;"> html</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">html</span><span style="color:#D19A66;"> lang</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;en&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">input</span><span style="color:#D19A66;"> type</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;text&quot;</span><span style="color:#D19A66;"> v-mode</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;msg&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">p</span><span style="color:#D19A66;"> v-mode</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;msg&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">      const</span><span style="color:#E5C07B;"> data</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">        msg</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;你好&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">      }</span></span>
<span class="line"><span style="color:#C678DD;">      const</span><span style="color:#E5C07B;"> input</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">querySelector</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;input&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">      const</span><span style="color:#E5C07B;"> p</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">querySelector</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;p&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E5C07B;">      input</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> data</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">msg</span></span>
<span class="line"><span style="color:#E5C07B;">      p</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">innerHTML</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> data</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">msg</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      // 视图变数据跟着变</span></span>
<span class="line"><span style="color:#E5C07B;">      input</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">addEventListener</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;input&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#E5C07B;">        data</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">msg</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> input</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span></span>
<span class="line"><span style="color:#ABB2BF;">      })</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      // 数据变视图变</span></span>
<span class="line"><span style="color:#C678DD;">      let</span><span style="color:#E06C75;"> temp</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> data</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">msg</span></span>
<span class="line"><span style="color:#E5C07B;">      Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">defineProperty</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;msg&#39;</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#61AFEF;">        get</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">          return</span><span style="color:#E06C75;"> temp</span></span>
<span class="line"><span style="color:#ABB2BF;">        },</span></span>
<span class="line"><span style="color:#61AFEF;">        set</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">          temp</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> value</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">          // 视图修改</span></span>
<span class="line"><span style="color:#E5C07B;">          input</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> temp</span></span>
<span class="line"><span style="color:#E5C07B;">          p</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">innerHTML</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> temp</span></span>
<span class="line"><span style="color:#ABB2BF;">        },</span></span>
<span class="line"><span style="color:#ABB2BF;">      })</span></span>
<span class="line"><span style="color:#E5C07B;">      data</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">msg</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &#39;小李&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;/</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">html</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre></div><h3 id="_2-router-原理" tabindex="-1">2. router 原理 <a class="header-anchor" href="#_2-router-原理" aria-label="Permalink to &quot;2. router 原理&quot;">​</a></h3><blockquote><p><a href="https://juejin.cn/post/6844903615283363848" target="_blank" rel="noreferrer">https://juejin.cn/post/6844903615283363848</a> &gt; <a href="https://juejin.cn/post/6844903600913645582" target="_blank" rel="noreferrer">https://juejin.cn/post/6844903600913645582</a></p></blockquote><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B;">history</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">reaplceState</span><span style="color:#E5C07B;">  history</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">pushState</span></span></code></pre></div><h3 id="_3-nexttick-原理-除了-mutation-observer-还有什么实现方式" tabindex="-1">3. nextTick 原理，除了 Mutation Observer 还有什么实现方式 <a class="header-anchor" href="#_3-nexttick-原理-除了-mutation-observer-还有什么实现方式" aria-label="Permalink to &quot;3. nextTick 原理，除了 Mutation Observer 还有什么实现方式&quot;">​</a></h3><h3 id="_4-keepalive-如何实现刷新" tabindex="-1">4. keepalive 如何实现刷新 <a class="header-anchor" href="#_4-keepalive-如何实现刷新" aria-label="Permalink to &quot;4. keepalive 如何实现刷新&quot;">​</a></h3><h3 id="_5-computed-实现原理" tabindex="-1">5. computed 实现原理 <a class="header-anchor" href="#_5-computed-实现原理" aria-label="Permalink to &quot;5. computed 实现原理&quot;">​</a></h3><h3 id="_6-created-和-mounted-的区别" tabindex="-1">6. created 和 mounted 的区别 <a class="header-anchor" href="#_6-created-和-mounted-的区别" aria-label="Permalink to &quot;6. created 和 mounted 的区别&quot;">​</a></h3><h2 id="react" tabindex="-1">react <a class="header-anchor" href="#react" aria-label="Permalink to &quot;react&quot;">​</a></h2><h3 id="_1-react-的-setstate-是同步异步-为什么" tabindex="-1">1. react 的 setState 是同步异步？为什么 <a class="header-anchor" href="#_1-react-的-setstate-是同步异步-为什么" aria-label="Permalink to &quot;1. react 的 setState 是同步异步？为什么&quot;">​</a></h3><h3 id="_2-react-里性能优化在哪个生命周期函数" tabindex="-1">2. react 里性能优化在哪个生命周期函数？ <a class="header-anchor" href="#_2-react-里性能优化在哪个生命周期函数" aria-label="Permalink to &quot;2. react 里性能优化在哪个生命周期函数？&quot;">​</a></h3><blockquote><p>shouldComponentUpdate 这个方法用来判断是否需要调用 render 方法重新描绘 dom。因为 dom 的描绘非常消耗性能，如果我们能在 shouldComponentUpdate 方法中能够写出更优化的 dom diff 算法，可以极大的提高性能。</p></blockquote><h3 id="_3-react-生命周期-各生命周期作用" tabindex="-1">3. react 生命周期，各生命周期作用 <a class="header-anchor" href="#_3-react-生命周期-各生命周期作用" aria-label="Permalink to &quot;3. react 生命周期，各生命周期作用&quot;">​</a></h3><ol><li>componentWillMount() – 在渲染之前执行，在客户端和服务器端都会执行。</li><li>componentDidMount() – 仅在第一次渲染后在客户端执行。</li><li>componentWillReceiveProps() – 当从父类接收到 props 并且在调用另一个渲染器之前调用。</li><li>shouldComponentUpdate() – 根据特定条件返回 true 或 false。如果你希望更新组件，请返回 true 否则返回 false。默认情况下，它返回 false。</li><li>componentWillUpdate() – 在 DOM 中进行渲染之前调用。</li><li>componentDidUpdate() – 在渲染发生后立即调用。</li><li>componentWillUnmount() – 从 DOM 卸载组件后调用。用于清理内存空间。 <blockquote><p>16.8+</p></blockquote></li><li>挂载阶段： constructor(props): 实例化。static getDerivedStateFromProps 从 props 中获取 state。 render 渲染。 componentDidMount: 完成挂载。</li><li>更新阶段： static getDerivedStateFromProps 从 props 中获取 state。 shouldComponentUpdate 判断是否需要重绘。 render 渲染。 getSnapshotBeforeUpdate 获取快照。 componentDidUpdate 渲染完成后回调。</li><li>卸载阶段： componentWillUnmount 即将卸载。</li><li>错误处理： static getDerivedStateFromError 从错误中获取 state。 componentDidCatch 捕获错误并进行处理。</li></ol><h3 id="_4-什么是高阶组件-hoc" tabindex="-1">4. 什么是高阶组件（hoc） <a class="header-anchor" href="#_4-什么是高阶组件-hoc" aria-label="Permalink to &quot;4. 什么是高阶组件（hoc）&quot;">​</a></h3><blockquote><p>高阶组件[higher order component]是一个以组件为参数并返回一个新组件的函数。HOC 运行你重用代码、逻辑和引导抽象。最常见的可能是 Redux 的 connect 函数。除了简单分享工具库和简单的组合，HOC 最好的方式是共享 React 组件之间的行为。如果你发现你在不同的地方写了大量代码来做同一件事时，就应该考虑将代码重构为可重用的 HOC。</p></blockquote><h3 id="什么是-react-fiber" tabindex="-1">什么是 react fiber <a class="header-anchor" href="#什么是-react-fiber" aria-label="Permalink to &quot;什么是 react fiber&quot;">​</a></h3><h3 id="hooks-原理" tabindex="-1">hooks 原理 <a class="header-anchor" href="#hooks-原理" aria-label="Permalink to &quot;hooks 原理&quot;">​</a></h3><h3 id="_5-简述-redux" tabindex="-1">5. 简述 redux <a class="header-anchor" href="#_5-简述-redux" aria-label="Permalink to &quot;5. 简述 redux&quot;">​</a></h3><h3 id="_6-diff-算法实现" tabindex="-1">6. diff 算法实现 <a class="header-anchor" href="#_6-diff-算法实现" aria-label="Permalink to &quot;6. diff 算法实现&quot;">​</a></h3><h3 id="_7-fiber-原理与实现" tabindex="-1">7. fiber 原理与实现 <a class="header-anchor" href="#_7-fiber-原理与实现" aria-label="Permalink to &quot;7. fiber 原理与实现&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 三个原则</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 单一事实来源：整个应用的状态存储在单个 store 中的对象/状态树里。单一状态树可以更容易地跟踪随时间的变化，并调试或检查应用程序。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 状态是只读的：改变状态的唯一方法是去触发一个动作。动作是描述变化的普通 JS 对象。就像 state 是数据的最小表示一样，该操作是对数据更改的最小表示。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 使用纯函数进行更改：为了指定状态树如何通过操作进行转换，你需要纯函数。纯函数是那些返回值仅取决于其参数值的函数。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// redux的组件</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// Action – 这是一个用来描述发生了什么事情的对象。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// Reducer – 这是一个确定状态将如何变化的地方。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// Store – 整个程序的状态/对象树保存在Store中。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// View – 只显示 Store 提供的数据。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 定义action</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// React 中的 Action 必须具有 type 属性，该属性指示正在执行的 ACTION 的类型。必须将它们定义为字符串常量，并且还可以向其添加更多的属性。在 Redux 中，action 被名为 Action Creators 的函数所创建。以下是 Action 和Action Creator 的示例：</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> addTodo</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">text</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">  return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    type</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">ADD_TODO</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    text</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 简述</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// redux 是一个应用数据流框架，主要是解决了组件间状态共享的问题，原理是集中式管理，主要有三个核心方法，action，store，reducer，</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 工作流程是 view 调用 store 的 dispatch 接收 action 传入 store，reducer 进行 state 操作，view 通过 store 提供的 getState 获取最新的数据，</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// flux 也是用来进行数据操作的，有四个组成部分 action，dispatch，view，store，工作流程是 view 发出一个 action，派发器接收 action，让 store 进行数据更新，更新完成以后 store 发出 change，view 接受 change 更新视图。Redux 和 Flux 很像。主要区别在于 Flux 有多个可以改变应用状态的 store，在 Flux 中 dispatcher 被用来传递数据到注册的回调事件，但是在 redux 中只能定义一个可更新状态的 store，redux 把 store 和 Dispatcher 合并,结构更加简单清晰</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 新增 state,对状态的管理更加明确，通过 redux，流程更加规范了，减少手动编码量，提高了编码效率，同时缺点时当数据更新时有时候组件不需要，但是也要重新绘制，有些影响效率。一般情况下，我们在构建多交互，多数据流的复杂项目应用时才会使用它们</span></span></code></pre></div><h3 id="_6-react-类组件和函数组件区别与使用场景" tabindex="-1">6. react 类组件和函数组件区别与使用场景 <a class="header-anchor" href="#_6-react-类组件和函数组件区别与使用场景" aria-label="Permalink to &quot;6. react 类组件和函数组件区别与使用场景&quot;">​</a></h3><h2 id="webpack" tabindex="-1">webpack <a class="header-anchor" href="#webpack" aria-label="Permalink to &quot;webpack&quot;">​</a></h2><h3 id="_1-生产环境-webpack-如何加快编译速度" tabindex="-1">1. 生产环境，webpack 如何加快编译速度 <a class="header-anchor" href="#_1-生产环境-webpack-如何加快编译速度" aria-label="Permalink to &quot;1. 生产环境，webpack 如何加快编译速度&quot;">​</a></h3><h3 id="_2-webpack-的几大概念-都是做什么的" tabindex="-1">2. webpack 的几大概念？都是做什么的 <a class="header-anchor" href="#_2-webpack-的几大概念-都是做什么的" aria-label="Permalink to &quot;2. webpack 的几大概念？都是做什么的&quot;">​</a></h3><ul><li>entry</li><li>output</li><li>loader</li><li>plugin</li></ul><h3 id="_3-loader-和-plugins-的区别和基本原理" tabindex="-1">3. loader 和 plugins 的区别和基本原理 <a class="header-anchor" href="#_3-loader-和-plugins-的区别和基本原理" aria-label="Permalink to &quot;3. loader 和 plugins 的区别和基本原理&quot;">​</a></h3><h2 id="网络" tabindex="-1">网络 <a class="header-anchor" href="#网络" aria-label="Permalink to &quot;网络&quot;">​</a></h2><h3 id="tcp" tabindex="-1">tcp <a class="header-anchor" href="#tcp" aria-label="Permalink to &quot;tcp&quot;">​</a></h3><p>第一次握手：客户端发送 syn 包(syn=j)到服务器，并进入 SYN_SEND 状态，等待服务器确认； 第二次握手：服务器收到 syn 包，必须确认客户的 SYN（ack=j+1），同时自己也发送一个 SYN 包（syn=k），即 SYN+ACK 包，此时服务器进入 SYN_RECV 状态； 第三次握手：客户端收到服务器的 SYN ＋ ACK 包，向服务器发送确认包 ACK(ack=k+1)，此包发送完毕，客户端和服务器进入 ESTABLISHED 状态，完成三次握手。</p><blockquote><p>握手过程中传送的包里不包含数据，三次握手完毕后，客户端与服务器才正式开始传送数据。理想状态下，TCP 连接一旦建立，在通信双方中的任何一方主动关闭连接之前，TCP 连接都将被一直保持下去。断开连接时服务器和客户端均可以主动发起断开 TCP 连接的请求，断开过程需要经过“四次握手”（过程就不细写了，就是服务器和客户端交互，最终确定断开）</p></blockquote><h3 id="http、https、http2" tabindex="-1">http、https、http2 <a class="header-anchor" href="#http、https、http2" aria-label="Permalink to &quot;http、https、http2&quot;">​</a></h3><h3 id="在地址栏里输入一个地址回车会发生哪些事情" tabindex="-1">在地址栏里输入一个地址回车会发生哪些事情 <a class="header-anchor" href="#在地址栏里输入一个地址回车会发生哪些事情" aria-label="Permalink to &quot;在地址栏里输入一个地址回车会发生哪些事情&quot;">​</a></h3><blockquote><p><a href="https://juejin.cn/post/6844903919395536910" target="_blank" rel="noreferrer">https://juejin.cn/post/6844903919395536910</a> &gt; <a href="https://segmentfault.com/a/1190000006879700" target="_blank" rel="noreferrer">https://segmentfault.com/a/1190000006879700</a></p></blockquote><ol><li>解析 URL：首先会对 URL 进行解析，分析所需要使用的传输协议和请求的资源的路径。如果输入的 URL 中的协议或者主机名不合法，将会把地址栏中输入的内容传递给搜索引擎。如果没有问题，浏览器会检查 URL 中是否出现了非法字符，如果存在非法字符，则对非法字符进行转义后再进行下一过程。</li><li>缓存判断：浏览器会判断所请求的资源是否在缓存里，如果请求的资源在缓存里并且没有失效，那么就直接使用，否则向服务器发起新的请求。</li><li>DNS 解析： 下一步首先需要获取的是输入的 URL 中的域名的 IP 地址，首先会判断本地是否有该域名的 IP 地址的缓存，如果有则使用，如果没有则向本地 DNS 服务器发起请求。本地 DNS 服务器也会先检查是否存在缓存，如果没有就会先向根域名服务器发起请求，获得负责的顶级域名服务器的地址后，再向顶级域名服务器请求，然后获得负责的权威域名服务器的地址后，再向权威域名服务器发起请求，最终获得域名的 IP 地址后，本地 DNS 服务器再将这个 IP 地址返回给请求的用户。用户向本地 DNS 服务器发起请求属于递归请求，本地 DNS 服务器向各级域名服务器发起请求属于迭代请求。</li><li>获取 MAC 地址： 当浏览器得到 IP 地址后，数据传输还需要知道目的主机 MAC 地址，因为应用层下发数据给传输层，TCP 协议会指定源端口号和目的端口号，然后下发给网络层。网络层会将本机地址作为源地址，获取的 IP 地址作为目的地址。然后将下发给数据链路层，数据链路层的发送需要加入通信双方的 MAC 地址，本机的 MAC 地址作为源 MAC 地址，目的 MAC 地址需要分情况处理。通过将 IP 地址与本机的子网掩码相与，可以判断是否与请求主机在同一个子网里，如果在同一个子网里，可以使用 APR 协议获取到目的主机的 MAC 地址，如果不在一个子网里，那么请求应该转发给网关，由它代为转发，此时同样可以通过 ARP 协议来获取网关的 MAC 地址，此时目的主机的 MAC 地址应该为网关的地址。</li><li>TCP 三次握手： 下面是 TCP 建立连接的三次握手的过程，首先客户端向服务器发送一个 SYN 连接请求报文段和一个随机序号，服务端接收到请求后向客户端发送一个 SYN ACK 报文段，确认连接请求，并且也向客户端发送一个随机序号。客户端接收服务器的确认应答后，进入连接建立的状态，同时向服务器也发送一个 ACK 确认报文段，服务器端接收到确认后，也进入连接建立状态，此时双方的连接就建立起来了。</li><li>HTTPS 握手： 如果使用的是 HTTPS 协议，在通信前还存在 TLS 的一个四次握手的过程。首先由客户端向服务器端发送使用的协议的版本号、一个随机数和可以使用的加密方法。服务器端收到后，确认加密的方法，也向客户端发送一个随机数和自己的数字证书。客户端收到后，首先检查数字证书是否有效，如果有效，则再生成一个随机数，并使用证书中的公钥对随机数加密，然后发送给服务器端，并且还会提供一个前面所有内容的 hash 值供服务器端检验。服务器端接收后，使用自己的私钥对数据解密，同时向客户端发送一个前面所有内容的 hash 值供客户端检验。这个时候双方都有了三个随机数，按照之前所约定的加密方法，使用这三个随机数生成一把秘钥，以后双方通信前，就使用这个秘钥对数据进行加密后再传输。</li><li>返回数据： 当页面请求发送到服务器端后，服务器端会返回一个 html 文件作为响应，浏览器接收到响应后，开始对 html 文件进行解析，开始页面的渲染过程。</li><li>页面渲染： 浏览器首先会根据 html 文件构建 DOM 树，根据解析到的 css 文件构建 CSSOM 树，如果遇到 script 标签，则判端是否含有 defer 或者 async 属性，要不然 script 的加载和执行会造成页面的渲染的阻塞。当 DOM 树和 CSSOM 树建立好后，根据它们来构建渲染树。渲染树构建好后，会根据渲染树来进行布局。布局完成后，最后使用浏览器的 UI 接口对页面进行绘制。这个时候整个页面就显示出来了。</li><li>TCP 四次挥手： 最后一步是 TCP 断开连接的四次挥手过程。若客户端认为数据发送完成，则它需要向服务端发送连接释放请求。服务端收到连接释放请求后，会告诉应用层要释放 TCP 链接。然后会发送 ACK 包，并进入 CLOSE_WAIT 状态，此时表明客户端到服务端的连接已经释放，不再接收客户端发的数据了。但是因为 TCP 连接是双向的，所以服务端仍旧可以发送数据给客户端。服务端如果此时还有没发完的数据会继续发送，完毕后会向客户端发送连接释放请求，然后服务端便进入 LAST-ACK 状态。客户端收到释放请求后，向服务端发送确认应答，此时客户端进入 TIME-WAIT 状态。该状态会持续 2MSL（最大段生存期，指报文段在网络中生存的时间，超时会被抛弃） 时间，若该时间段内没有服务端的重发请求的话，就进入 CLOSED 状态。当服务端收到确认应答后，也便进入 CLOSED 状态。</li></ol><h2 id="算法" tabindex="-1">算法 <a class="header-anchor" href="#算法" aria-label="Permalink to &quot;算法&quot;">​</a></h2><h3 id="排序" tabindex="-1">排序 <a class="header-anchor" href="#排序" aria-label="Permalink to &quot;排序&quot;">​</a></h3><ul><li>快速排序</li><li>插入排序</li><li>冒泡排序</li><li>选择排序</li><li>归并排序</li></ul><h3 id="快速排序" tabindex="-1">快速排序 <a class="header-anchor" href="#快速排序" aria-label="Permalink to &quot;快速排序&quot;">​</a></h3><blockquote><p>快速排序的基本思想就是分治法的思想，寻找中间点，并对其左右的序列递归进行排序，直到左右都排序完成。</p></blockquote><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>function quickSort (arr) {</span></span>
<span class="line"><span>    if (arr.length == 0) {</span></span>
<span class="line"><span>        return arr</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    var pirotIndex = Math.floor(arr.length/2)</span></span>
<span class="line"><span>    var pirot = arr.splice(pirotIndex,1)[0]</span></span>
<span class="line"><span>    var left = [], right = []</span></span>
<span class="line"><span>    for (var i = 0; i &lt; arr.length; i++) {</span></span>
<span class="line"><span>        if (arr[i] &gt; pirot) {</span></span>
<span class="line"><span>            right.push(arr[i])</span></span>
<span class="line"><span>        } else {</span></span>
<span class="line"><span>            left.push(arr[i])</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    return quickSort(left).concat(pirot, quickSort(right))</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>console.log(quickSort([2,4,6,1,7,8,4,9,99,6]))</span></span></code></pre></div><h3 id="插入排序" tabindex="-1">插入排序 <a class="header-anchor" href="#插入排序" aria-label="Permalink to &quot;插入排序&quot;">​</a></h3><blockquote><p>将数组分为无序区和有序区两个区，然后不断将无序区的第一个元素按大小顺序插入到有序区中去，最终将所有无序区元素都移动到有序区完成排序</p></blockquote><h3 id="冒泡排序" tabindex="-1">冒泡排序 <a class="header-anchor" href="#冒泡排序" aria-label="Permalink to &quot;冒泡排序&quot;">​</a></h3><blockquote><p>比较相邻的元素。如果第一个比第二个大，就交换他们两个。对每一对相邻元素做同样的工作，从开始第一对到结尾的最后一对。在这一点，最后的元素应该会是最大的数。</p></blockquote><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>function bubbleSort(arr){</span></span>
<span class="line"><span>    if(arr.length==0){</span></span>
<span class="line"><span>        return arr</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    for(var i=0;i&lt;arr.length;i++){</span></span>
<span class="line"><span>        for(j=0;j&lt;arr.length-1;j++){</span></span>
<span class="line"><span>            if(arr[j]&gt;arr[j+1]){</span></span>
<span class="line"><span>                // 交换位置</span></span>
<span class="line"><span>                [arr[j],arr[j+1]]=[arr[j+1],arr[j]] //ES6解构</span></span>
<span class="line"><span>            }</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    return arr</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>console.log(bubbleSort([2,4,6,1,7,8,4,9,99,6]))</span></span></code></pre></div><h3 id="二叉树" tabindex="-1">二叉树 <a class="header-anchor" href="#二叉树" aria-label="Permalink to &quot;二叉树&quot;">​</a></h3><h3 id="diff-算法" tabindex="-1">diff 算法 <a class="header-anchor" href="#diff-算法" aria-label="Permalink to &quot;diff 算法&quot;">​</a></h3><h2 id="其他" tabindex="-1">其他 <a class="header-anchor" href="#其他" aria-label="Permalink to &quot;其他&quot;">​</a></h2><h3 id="什么是进程、什么是线程" tabindex="-1">什么是进程、什么是线程 <a class="header-anchor" href="#什么是进程、什么是线程" aria-label="Permalink to &quot;什么是进程、什么是线程&quot;">​</a></h3><h3 id="设计原则与设计模式" tabindex="-1">设计原则与设计模式 <a class="header-anchor" href="#设计原则与设计模式" aria-label="Permalink to &quot;设计原则与设计模式&quot;">​</a></h3><ol><li>工厂模式 <blockquote><p>故名思意，我们从字面上的意思就可以看到，可以想象一座工厂源源不断产出一样的产品，流水线作业。没错，工厂模式就是这样。</p></blockquote></li><li>单例模式 <blockquote><p>单例模式就是保证一个类仅有一个实例，并提供一个访问它的全局访问点。其实这有一点像我们 vuex 当中的实现，也是一个全局的状态管理，并且提供一个接口访问。</p></blockquote></li><li>代理模式 <blockquote><p>我们在事件代理的时候其实就是使用了代理模式，通过把监听事件全部交由父节点进行监听，这样你添加节点或者删除节点的时候就不用去改变监听的代码。</p></blockquote></li><li>发布订阅模式 <blockquote><p>这种模式在生活中随处可见，比如你订阅了一个网课，开始前 10 分钟就会提醒你去听课。这里其实就是发布-订阅的模式，你订阅了它的开课信息，但是你不会接收到另一门的开课信息，因为你没有订阅。</p></blockquote></li><li>适配器模式</li><li>策略模式</li><li>迭代器模式</li></ol>`,101)),t(a)])}const h=n(c,[["render",r]]);export{u as __pageData,h as default};
