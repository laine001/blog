import{_ as e,C as o,c as s,o as l,ad as t,G as r}from"./chunks/framework.CMzpCLzZ.js";const p="/blog/images/z-1.jpg",B=JSON.parse('{"title":"一句话记录","description":"","frontmatter":{},"headers":[],"relativePath":"fe/oneline.md","filePath":"fe/oneline.md","lastUpdated":1754895279000}'),c={name:"fe/oneline.md"};function i(d,a,h,u,y,b){const n=o("git-talk");return l(),s("div",null,[a[0]||(a[0]=t('<h1 id="一句话记录" tabindex="-1">一句话记录 <a class="header-anchor" href="#一句话记录" aria-label="Permalink to &quot;一句话记录&quot;">​</a></h1><img class="post-img" src="'+p+`"><h2 id="有时候修改由-git-提交过的文件名称的大小写无效" tabindex="-1">有时候修改由 git 提交过的文件名称的大小写无效 <a class="header-anchor" href="#有时候修改由-git-提交过的文件名称的大小写无效" aria-label="Permalink to &quot;有时候修改由 git 提交过的文件名称的大小写无效&quot;">​</a></h2><p>全局设置 Git 大小写敏感 <code>git config --global core.ignorecase false</code></p><h2 id="后端工程设置了允许所有源跨域请求-前端依旧调用失败" tabindex="-1">后端工程设置了允许所有源跨域请求，前端依旧调用失败 <a class="header-anchor" href="#后端工程设置了允许所有源跨域请求-前端依旧调用失败" aria-label="Permalink to &quot;后端工程设置了允许所有源跨域请求，前端依旧调用失败&quot;">​</a></h2><p>一般带有登录鉴权的请求，前端需要配置<code>withCredentials: true</code>，此时后端 <code>cors</code> 配置如果为<code>*</code>，则浏览器依旧会有限制，此时后端应配置请求的来源地址而不是<code>*</code></p><h2 id="target-blank-的安全漏洞" tabindex="-1">target=&quot;_blank&quot;的安全漏洞 <a class="header-anchor" href="#target-blank-的安全漏洞" aria-label="Permalink to &quot;target=&quot;\\_blank&quot;的安全漏洞&quot;">​</a></h2><p>使用 window.open 或 a 标签 target=&quot;_blank&quot;，目标页面可以通过<code>opener.location.replace</code>跳转钓鱼网站，可通过重置 opener 可以阻止目标页的相关程序</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> otherWindow</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> window</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">open</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;https://xxxx&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E5C07B;">otherWindow</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">opener</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> null</span></span>
<span class="line"><span style="color:#E5C07B;">otherWindow</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">location</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> url</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">a标签跳转可直接添加属性rel</span><span style="color:#ABB2BF;">，</span><span style="color:#E06C75;">其中</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// noopener：将 window.opener置空</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// noreferrer：兼容老浏览器/火狐。禁用HTTP头部Referer属性（后端方式）</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">a</span><span style="color:#D19A66;font-style:italic;"> target</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;_blank&quot;</span><span style="color:#D19A66;font-style:italic;"> href</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#D19A66;font-style:italic;"> rel</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;noopener noreferrer nofollow&quot;</span><span style="color:#ABB2BF;">&gt;xxx&lt;/</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre></div><h2 id="伪类与伪元素的区别" tabindex="-1">伪类与伪元素的区别 <a class="header-anchor" href="#伪类与伪元素的区别" aria-label="Permalink to &quot;伪类与伪元素的区别&quot;">​</a></h2><p>伪类用于当已有的元素处于某个状态时，为其添加对应的样式，这个状态是根据用户行为而动态变化的。比如，当用户悬停在指定的元素时，我们可以通过:hover 来描述这个元素的状态。</p><p>伪元素用于创建一些不在文档树中的元素，并为其添加样式。它允许我们为元素的某些部分设置样式。比如，我们可以通过::before 来在一个元素前增加一些文本，并为文本添加样式。虽然用户可以看到文本，但是实际上它不在文档树中。</p><h2 id="npm-run-xxx-基本原理" tabindex="-1">npm run xxx 基本原理 <a class="header-anchor" href="#npm-run-xxx-基本原理" aria-label="Permalink to &quot;npm run xxx 基本原理&quot;">​</a></h2><ul><li><p>运行<code>npm run xxx</code>的时候，npm 会先在当前目录的 node_modules/.bin 查找要执行的程序，如果找到则运行</p></li><li><p>没有找到则从全局的 node_modules/.bin 中查找，npm i -g xxx 就是安装到到全局目录</p></li><li><p>如果全局目录还是没找到，那么就从 path 环境变量中查找有没有其他同名的可执行程序</p></li></ul><h2 id="通过设置元素的边框属性border-inline-block-start-end-width可以实现类按钮组的样式-边框问题" tabindex="-1">通过设置元素的边框属性<code>border-inline/block-start/end-width</code>可以实现类按钮组的样式(边框问题) <a class="header-anchor" href="#通过设置元素的边框属性border-inline-block-start-end-width可以实现类按钮组的样式-边框问题" aria-label="Permalink to &quot;通过设置元素的边框属性\`border-inline/block-start/end-width\`可以实现类按钮组的样式(边框问题)&quot;">​</a></h2><p><a href="https://ant.design/components/radio-cn" target="_blank" rel="noreferrer">https://ant.design/components/radio-cn</a></p><h2 id="npm-link" tabindex="-1">npm link <a class="header-anchor" href="#npm-link" aria-label="Permalink to &quot;npm link&quot;">​</a></h2>`,17)),r(n)])}const x=e(c,[["render",i]]);export{B as __pageData,x as default};
