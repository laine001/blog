import{_ as n,c as a,o as l,ad as p}from"./chunks/framework.CMzpCLzZ.js";const F=JSON.parse('{"title":"Vue中使用mock","description":"","frontmatter":{"layout":"using Mock In Vue","title":"Vue中使用mock","date":"2019-02-02T22:49:03.000Z","tags":"vue","categories":"javascript"},"headers":[],"relativePath":"fe/vue中使用mock.md","filePath":"fe/vue中使用mock.md","lastUpdated":1754895279000}'),o={name:"fe/vue中使用mock.md"};function e(t,s,c,r,B,y){return l(),a("div",null,s[0]||(s[0]=[p(`<p>配置mock之前需配置好axios</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF;">  npm</span><span style="color:#98C379;"> install</span><span style="color:#98C379;"> mock</span></span></code></pre></div><blockquote><p>基础使用（单独页面中使用）</p></blockquote><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">button</span><span style="color:#D19A66;"> @click</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;getData&quot;</span><span style="color:#ABB2BF;">&gt; 生成数据 &lt;/</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre></div><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> Mock</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &#39;mockjs&#39;</span><span style="color:#7F848E;font-style:italic;"> // node方式引入 (CommonJS)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">  name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;HelloWorld&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#61AFEF;">  data</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">      mockData</span><span style="color:#ABB2BF;">: [] </span><span style="color:#7F848E;font-style:italic;">// 生成数据</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#E06C75;">  methods</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#61AFEF;">    getRandom</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#E5C07B;">      this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">mockData</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Mock</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">mock</span><span style="color:#ABB2BF;">({ </span><span style="color:#7F848E;font-style:italic;">//生成数据规则</span></span>
<span class="line"><span style="color:#98C379;">        &#39;list|1-10&#39;</span><span style="color:#ABB2BF;">: [{</span></span>
<span class="line"><span style="color:#98C379;">          &#39;id|+1&#39;</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">1</span></span>
<span class="line"><span style="color:#ABB2BF;">        }]</span></span>
<span class="line"><span style="color:#ABB2BF;">      })</span></span>
<span class="line"><span style="color:#E5C07B;">      document</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">body</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">innerHTML</span><span style="color:#56B6C2;"> +=</span><span style="color:#98C379;"> &#39;&lt;pre&gt;&#39;</span><span style="color:#56B6C2;"> +</span><span style="color:#E5C07B;"> JSON</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">stringify</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">mockData</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">+</span><span style="color:#98C379;"> &#39;&lt;/pre&gt;&#39;</span><span style="color:#7F848E;font-style:italic;"> // 展示到页面中</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span></code></pre></div><blockquote><p>全局配置 配置好的requestjs文件中</p></blockquote><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> axios</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &#39;axios&#39;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// axios.defaults.headers.post[&#39;Content-Type&#39;] = &#39;application/x-www-urlencoded&#39;</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> http</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> axios</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">create</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">http</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">defaults</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">timeout</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 3000</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">http</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">interceptors</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">request</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">use</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">config</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#ABB2BF;"> { </span><span style="color:#7F848E;font-style:italic;">// 请求拦截器配置 // 可不配置</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // do sth</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E06C75;"> config</span></span>
<span class="line"><span style="color:#ABB2BF;">}, </span><span style="color:#E06C75;font-style:italic;">error</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">error</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E5C07B;"> Promise</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">reject</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">error</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">http</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">interceptors</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">response</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">use</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">response</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#ABB2BF;"> { </span><span style="color:#7F848E;font-style:italic;">// 响应拦截器配置 // 可不配置</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // do something</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E06C75;"> response</span></span>
<span class="line"><span style="color:#ABB2BF;">}, </span><span style="color:#E06C75;font-style:italic;">error</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">error</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E5C07B;"> Promise</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">reject</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">error</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> fetch</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">url</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">params</span><span style="color:#ABB2BF;">) { </span><span style="color:#7F848E;font-style:italic;">// 封装axios的post请求</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> Promise</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">resolve</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">reject</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> { </span><span style="color:#7F848E;font-style:italic;">// promise 用法,自行查阅</span></span>
<span class="line"><span style="color:#E5C07B;">        axios</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">post</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">url</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">params</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">response</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">            resolve</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">response</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// promise相关</span></span>
<span class="line"><span style="color:#ABB2BF;">        }).</span><span style="color:#61AFEF;">catch</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">error</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">            reject</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">error</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// promise相关</span></span>
<span class="line"><span style="color:#ABB2BF;">        })</span></span>
<span class="line"><span style="color:#ABB2BF;">    })</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#ABB2BF;"> { </span><span style="color:#7F848E;font-style:italic;">// 暴露htto_mock方法，即后面页面中用到的方法</span></span>
<span class="line"><span style="color:#61AFEF;">    http_mock</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">url</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">params</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#61AFEF;"> fetch</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">url</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">params</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre></div><blockquote><p>然后配置mockjs</p></blockquote><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> Mock</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &#39;mockjs&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> Random</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Mock</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">Random</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#61AFEF;"> listData</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> _data</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> []</span></span>
<span class="line"><span style="color:#C678DD;">    for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#D19A66;"> 20</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> newList</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> { </span><span style="color:#7F848E;font-style:italic;">// 详细 规则 参照mockjs官网</span></span>
<span class="line"><span style="color:#E06C75;">      title</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Random</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">csentence</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">30</span><span style="color:#ABB2BF;">), </span><span style="color:#7F848E;font-style:italic;">//  Random.csentence( min, max )</span></span>
<span class="line"><span style="color:#E06C75;">      imgSrc</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Random</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">dataImage</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;200x160&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;这是图片中的文本&#39;</span><span style="color:#ABB2BF;">), </span><span style="color:#7F848E;font-style:italic;">// Random.dataImage( size, text ) 生成图片（base64位数据格式）</span></span>
<span class="line"><span style="color:#E06C75;">      author_name</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Random</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">cname</span><span style="color:#ABB2BF;">(), </span><span style="color:#7F848E;font-style:italic;">// Random.cname() 随机生成中文名</span></span>
<span class="line"><span style="color:#E06C75;">      date</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Random</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">date</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">+</span><span style="color:#98C379;"> &#39; &#39;</span><span style="color:#56B6C2;"> +</span><span style="color:#E5C07B;"> Random</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">time</span><span style="color:#ABB2BF;">() </span><span style="color:#7F848E;font-style:italic;">// Random.date()指示生成的日期字符串的格式,默认为yyyy-MM-dd；Random.time() 返回一个随机的时间字符串</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#E5C07B;">      _data</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">newList</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#C678DD;">  return</span><span style="color:#ABB2BF;"> {</span><span style="color:#E06C75;">_data</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">_data</span><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// url为要拦截的请求地址  请求方式  请求数据（规则） （此处api会被mockjs拦截）</span></span>
<span class="line"><span style="color:#E5C07B;">Mock</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">mock</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;http://route.showapi.com/60-27&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;post&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">listData</span><span style="color:#ABB2BF;">)</span></span></code></pre></div><blockquote><p>mainjs中引入即可</p></blockquote><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> request</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &#39;@/http/request&#39;</span></span></code></pre></div><blockquote><p>最后就是页面中使用了</p></blockquote><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// import request from &#39;@/http/request&#39; // 页面中引入配置好的api请求</span></span>
<span class="line"><span style="color:#61AFEF;">created</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getData</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">},</span></span>
<span class="line"><span style="color:#E06C75;">method</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#61AFEF;">    getData</span><span style="color:#ABB2BF;">() { </span><span style="color:#7F848E;font-style:italic;">// 假装要使用http_mock发送请求（#手动滑稽#）（mock自动拦截请求并生成数据）</span></span>
<span class="line"><span style="color:#E5C07B;">         request</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">http_mock</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;http://route.showapi.com/60-27&#39;</span><span style="color:#ABB2BF;">,</span><span style="color:#98C379;">&#39;api_id=63114&amp;api_sign=3847b0&#39;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">response</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">            console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">response</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_data</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">         }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }  </span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre></div><p>完事其他页面中引入下就能使用了，后台接口对接好之后，mockjs直接取消使用就ok了</p>`,14)]))}const A=n(o,[["render",e]]);export{F as __pageData,A as default};
