import{_ as l,c as p,o,ad as a,l as n}from"./chunks/framework.C6Isdag-.js";const F=JSON.parse('{"title":"webpack工程化","description":"","frontmatter":{"title":"webpack工程化","date":"2020-06-12T09:47:08.000Z","tags":null},"headers":[],"relativePath":"fe/webpack工程化.md","filePath":"fe/webpack工程化.md","lastUpdated":1739259545000}'),e={name:"fe/webpack工程化.md"};function t(c,s,r,i,y,B){return o(),p("div",null,s[0]||(s[0]=[a('<h3 id="webpack是什么" tabindex="-1">webpack是什么 <a class="header-anchor" href="#webpack是什么" aria-label="Permalink to &quot;webpack是什么&quot;">​</a></h3><blockquote><p>webpack 是一个现代 JavaScript 应用程序的静态模块打包器(module bundler)。 当 webpack 处理应用程序时，它会递归地构建一个依赖关系图(dependency graph)， 其中包含应用程序需要的每个模块，然后将所有这些模块打包成一个或多个 bundle</p></blockquote><h3 id="几个基本概念" tabindex="-1">几个基本概念 <a class="header-anchor" href="#几个基本概念" aria-label="Permalink to &quot;几个基本概念&quot;">​</a></h3><ul><li>entry 入口文件</li><li>output 输出</li><li>loader</li><li>plugins</li></ul><h4 id="entry" tabindex="-1">entry <a class="header-anchor" href="#entry" aria-label="Permalink to &quot;entry&quot;">​</a></h4><blockquote><p>入口文件，类似于其他语言的起始文件 指示webpack使用某个文件作为构建内部依赖图的开始，可以为多个 以entry属性配置</p></blockquote><h4 id="output" tabindex="-1">output <a class="header-anchor" href="#output" aria-label="Permalink to &quot;output&quot;">​</a></h4>',7),n("blockquote",{"path:":"",",":"","filename:":""},[n("p",null,"告诉webpack构建好后 在哪里输出所创建的bundle 及如何命名等 output:")],-1),a(`<h4 id="loader" tabindex="-1">loader <a class="header-anchor" href="#loader" aria-label="Permalink to &quot;loader&quot;">​</a></h4><blockquote><p>让webpack处理非javascript文件(webpack自身只理解js) loader可以将各个类型的文件转换为webpack可以处理的模块 如css less vue jsx&#39;</p></blockquote><h4 id="plugins" tabindex="-1">plugins <a class="header-anchor" href="#plugins" aria-label="Permalink to &quot;plugins&quot;">​</a></h4><blockquote><p>打包优化和压缩，重新定义环境中的变量等更广的任务</p></blockquote><h3 id="基础demo理解打包模式" tabindex="-1">基础demo理解打包模式 <a class="header-anchor" href="#基础demo理解打包模式" aria-label="Permalink to &quot;基础demo理解打包模式&quot;">​</a></h3><h4 id="建立工程目录" tabindex="-1">建立工程目录 <a class="header-anchor" href="#建立工程目录" aria-label="Permalink to &quot;建立工程目录&quot;">​</a></h4><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF;">mkdir</span><span style="color:#98C379;"> webpack-demo</span><span style="color:#ABB2BF;"> &amp;&amp; </span><span style="color:#56B6C2;">cd</span><span style="color:#98C379;"> webpack-demo</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> init</span><span style="color:#D19A66;"> -y</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> install</span><span style="color:#98C379;"> webpack</span><span style="color:#98C379;"> webpack-cli</span><span style="color:#D19A66;"> --save-dev</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 目录结构</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># webpack-demo</span></span>
<span class="line"><span style="color:#61AFEF;">/src</span></span>
<span class="line"><span style="color:#61AFEF;">  -</span><span style="color:#98C379;"> index.js</span></span>
<span class="line"><span style="color:#61AFEF;">/dist</span></span>
<span class="line"><span style="color:#61AFEF;">  -</span><span style="color:#98C379;"> index.html</span></span>
<span class="line"><span style="color:#61AFEF;">package.json</span></span>
<span class="line"><span style="color:#61AFEF;">webpack.config.js</span></span></code></pre></div><h5 id="编写-src-index-js" tabindex="-1">编写/src/index.js <a class="header-anchor" href="#编写-src-index-js" aria-label="Permalink to &quot;编写/src/index.js&quot;">​</a></h5><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> dom</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createElement</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;div</span><span style="color:#FFFFFF;">)</span></span>
<span class="line"><span style="color:#E5C07B;">dom</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">innerHTML</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &#39;hello webpack&#39;</span></span>
<span class="line"><span style="color:#E5C07B;">document</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">body</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">appendChild</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">dom</span><span style="color:#ABB2BF;">)</span></span></code></pre></div><h5 id="编写-dist-index-html" tabindex="-1">编写/dist/index.html <a class="header-anchor" href="#编写-dist-index-html" aria-label="Permalink to &quot;编写/dist/index.html&quot;">​</a></h5><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#56B6C2;">&lt;!</span><span style="color:#E5C07B;">DOCTYPE</span><span style="color:#E06C75;"> html</span><span style="color:#56B6C2;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">html</span><span style="color:#D19A66;font-style:italic;"> lang</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;en&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;font-style:italic;"> charset</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;UTF-8&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;font-style:italic;"> name</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;viewport&quot;</span><span style="color:#D19A66;font-style:italic;"> content</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;width=device-width, initial-scale=1.0&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;font-style:italic;"> http-equiv</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;X-UA-Compatible&quot;</span><span style="color:#D19A66;font-style:italic;"> content</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;ie=edge&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;xxx&lt;/</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E06C75;">script</span><span style="color:#D19A66;font-style:italic;"> src</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;./bundle.js&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">html</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre></div><h5 id="编写webpack-config-js" tabindex="-1">编写webpack.config.js <a class="header-anchor" href="#编写webpack-config-js" aria-label="Permalink to &quot;编写webpack.config.js&quot;">​</a></h5><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">  mode</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;development&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">  entry</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;./src/index.js&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">  output</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">    path</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">__dirname</span><span style="color:#56B6C2;"> +</span><span style="color:#98C379;"> &#39;/dist&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    filename</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;bundle.js&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre></div><h4 id="构建" tabindex="-1">构建 <a class="header-anchor" href="#构建" aria-label="Permalink to &quot;构建&quot;">​</a></h4><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF;">npx</span><span style="color:#98C379;"> webpack</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 查看dist下的index.html是否生效</span></span></code></pre></div><h4 id="配置loader加载css" tabindex="-1">配置loader加载css <a class="header-anchor" href="#配置loader加载css" aria-label="Permalink to &quot;配置loader加载css&quot;">​</a></h4><h3 id="loader原理" tabindex="-1">loader原理 <a class="header-anchor" href="#loader原理" aria-label="Permalink to &quot;loader原理&quot;">​</a></h3><blockquote><p>很多loader的职责都是单一的，只需要完成一种转换。 若一个源文件需要多步转换才能使用,就需要多个loader去转换，loader会顺序执行</p></blockquote><h4 id="一个最简单的loader源码" tabindex="-1">一个最简单的loader源码 <a class="header-anchor" href="#一个最简单的loader源码" aria-label="Permalink to &quot;一个最简单的loader源码&quot;">​</a></h4><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 运行在nodejs中</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> sass</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;node-sass&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">source</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // source 为 compiler 传递给 Loader 的一个文件的原内容</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 该函数需要返回处理后的内容，这里简单起见，直接把原内容返回了，相当于该 Loader 没有做任何转换</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // return source</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // or</span></span>
<span class="line"><span style="color:#C678DD;">  return</span><span style="color:#61AFEF;"> sass</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">source</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 使用</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// nodemodule中</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// module.exports = {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//   module: {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//     rules: [</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//       {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//         test: /\\.sass$/&#39;,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//         use: [&#39;sass-loader&#39;, &#39;node-sass&#39;],</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//         // include</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//       }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//     ]</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//   }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 自定义文件（vuecli中）</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// vue.config.js</span></span>
<span class="line"><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">  configureWebpack</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;font-style:italic;">config</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">    config</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">rules</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">      test</span><span style="color:#ABB2BF;">:</span><span style="color:#E06C75;"> /</span><span style="color:#56B6C2;">\\.</span><span style="color:#E06C75;">txt</span><span style="color:#C678DD;">$</span><span style="color:#E06C75;">/</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">      use</span><span style="color:#ABB2BF;">: [</span></span>
<span class="line"><span style="color:#ABB2BF;">        {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">          // 文件在本地的地址</span></span>
<span class="line"><span style="color:#E06C75;">          loader</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">path</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">resolve</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;./test-loader&#39;</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">          // options: {}</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">      ]</span></span>
<span class="line"><span style="color:#ABB2BF;">    })</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre></div><h4 id="bable-loader转换es6" tabindex="-1">bable-loader转换es6 <a class="header-anchor" href="#bable-loader转换es6" aria-label="Permalink to &quot;bable-loader转换es6&quot;">​</a></h4><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">source</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 通过 this.callback 告诉 Webpack 返回的结果</span></span>
<span class="line"><span style="color:#E5C07B;">  this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">callback</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">source</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">sourceMaps</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 当你使用 this.callback 返回内容时，该 Loader 必须返回 undefined，</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 以让 Webpack 知道该 Loader 返回的结果在 this.callback 中，而不是 return 中 </span></span>
<span class="line"><span style="color:#C678DD;">  return</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 其中的 this.callback 是 Webpack 给 Loader 注入的 API，以方便 Loader 和 Webpack 之间通信</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // this.callback(</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  //   // 当无法转换原内容时，给 Webpack 返回一个 Error</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  //   err: Error | null,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  //   // 原内容转换后的内容</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  //   content: string | Buffer,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  //   // 用于把转换后的内容得出原内容的 Source Map，方便调试</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  //   sourceMap?: SourceMap,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  //   // 如果本次转换为原内容生成了 AST 语法树，可以把这个 AST 返回，</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  //   // 以方便之后需要 AST 的 Loader 复用该 AST，以避免重复生成 AST，提升性能</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  //   abstractSyntaxTree?: AST</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // )</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre></div><h3 id="plugins原理" tabindex="-1">plugins原理 <a class="header-anchor" href="#plugins原理" aria-label="Permalink to &quot;plugins原理&quot;">​</a></h3><h4 id="编写plugin" tabindex="-1">编写plugin <a class="header-anchor" href="#编写plugin" aria-label="Permalink to &quot;编写plugin&quot;">​</a></h4><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> DemoPlugin</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 在构造函数中获取用户给该插件传入的配置</span></span>
<span class="line"><span style="color:#C678DD;">  constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">option</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // Webpack 会调用 DemoPlugin 实例的 apply 方法给插件实例传入 compiler 对象</span></span>
<span class="line"><span style="color:#61AFEF;">  apply</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">compiler</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">    compiler</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">plugin</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;compilation&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">compilation</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    })</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">modue</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">exports</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> DemoPlugin</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 使用</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> DemoPlugin</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;./DemoPlugin.js&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">export</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">  plugins</span><span style="color:#ABB2BF;">: [</span></span>
<span class="line"><span style="color:#C678DD;">    new</span><span style="color:#61AFEF;"> DemoPlugin</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">options</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  ]</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre></div>`,25)]))}const u=l(e,[["render",t]]);export{F as __pageData,u as default};
