import{_ as n,C as l,c as o,o as p,ad as e,G as t}from"./chunks/framework.C6Isdag-.js";const C=JSON.parse('{"title":"洋葱模型","description":"","frontmatter":{},"headers":[],"relativePath":"fe/onion-model.md","filePath":"fe/onion-model.md","lastUpdated":1739323884000}'),c={name:"fe/onion-model.md"};function r(B,s,y,i,F,A){const a=l("git-talk");return p(),o("div",null,[s[0]||(s[0]=e(`<h1 id="洋葱模型" tabindex="-1">洋葱模型 <a class="header-anchor" href="#洋葱模型" aria-label="Permalink to &quot;洋葱模型&quot;">​</a></h1><img class="post-img" src="https://www4.bing.com//th?id=OHR.TunisiaAmphitheatre_ZH-CN4431856872_UHD.jpg"><h2 id="一个请求经过中间件最后生成响应" tabindex="-1">一个请求经过中间件最后生成响应 <a class="header-anchor" href="#一个请求经过中间件最后生成响应" aria-label="Permalink to &quot;一个请求经过中间件最后生成响应&quot;">​</a></h2><p><img src="https://camo.githubusercontent.com/d80cf3b511ef4898bcde9a464de491fa15a50d06/68747470733a2f2f7261772e6769746875622e636f6d2f66656e676d6b322f6b6f612d67756964652f6d61737465722f6f6e696f6e2e706e67" alt="洋葱模型"></p><h2 id="基于-koa2-的-demo" tabindex="-1">基于 koa2 的 demo <a class="header-anchor" href="#基于-koa2-的-demo" aria-label="Permalink to &quot;基于 koa2 的 demo&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> Koa</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;koa&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> app</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Koa</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> PORT</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 3000</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// #1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">use</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">async</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">ctx</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">next</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">  console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;wareA&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">  await</span><span style="color:#61AFEF;"> next</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#E5C07B;">  console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;wareA&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// #2</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// app.use和eggjs里配置config.middleware = []同理</span></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">use</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">async</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">ctx</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">next</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">  console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;wareB&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">  await</span><span style="color:#61AFEF;"> next</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#E5C07B;">  console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;wareB&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">use</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">async</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">ctx</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">next</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">  console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;wareC&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">listen</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">PORT</span><span style="color:#ABB2BF;">)</span></span></code></pre></div><blockquote><p>访问 localhost:3000,控制台输出</p></blockquote><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>wareA</span></span>
<span class="line"><span>wareB</span></span>
<span class="line"><span>wareC</span></span>
<span class="line"><span>wareB</span></span>
<span class="line"><span>wareA</span></span></code></pre></div><blockquote><p>当程序运行到 await next()时，会进入到下一个中间件，处理完之后才会继续处理 next 之后的程序 可以非常方便的实现后置处理逻辑</p></blockquote>`,9)),t(a)])}const f=n(c,[["render",r]]);export{C as __pageData,f as default};
