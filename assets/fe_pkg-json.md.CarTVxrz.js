import{_ as i,c as a,o as e,ag as t}from"./chunks/framework.BXwhd-1y.js";const c=JSON.parse('{"title":"package.json文件中各字段","description":"","frontmatter":{},"headers":[],"relativePath":"fe/pkg-json.md","filePath":"fe/pkg-json.md","lastUpdated":1757663734000}'),n={name:"fe/pkg-json.md"};function p(l,s,d,o,h,k){return e(),a("div",null,s[0]||(s[0]=[t(`<h1 id="package-json文件中各字段" tabindex="-1">package.json文件中各字段 <a class="header-anchor" href="#package-json文件中各字段" aria-label="Permalink to &quot;package.json文件中各字段&quot;">​</a></h1><h2 id="type" tabindex="-1"><code>type</code> <a class="header-anchor" href="#type" aria-label="Permalink to &quot;\`type\`&quot;">​</a></h2><p>默认的模板系统：</p><ol><li><code>commonjs</code>(默认)，使用时使用<code>require()</code></li><li><code>module</code>，使用时使用<code>import/export</code>，文件后缀<code>.js</code>会被当做ESM处理</li></ol><h2 id="exports" tabindex="-1"><code>exports</code> <a class="header-anchor" href="#exports" aria-label="Permalink to &quot;\`exports\`&quot;">​</a></h2><p>现代推荐。更精细的控制模块导出（替代<code>main</code>、<code>brower</code>、<code>module</code>等字段），支持条件导出，适配不同的环境。</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;exports&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;import&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./dist/index.esm.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 或者 &quot;./dist/index.mjs&quot;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;require&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./dist/index.cjs.js&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 后者 &quot;./dist/index.cjs&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;./utils&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./dist/utils.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="scripts" tabindex="-1"><code>scripts</code> <a class="header-anchor" href="#scripts" aria-label="Permalink to &quot;\`scripts\`&quot;">​</a></h2><p>脚本：定义常用的快捷命令。</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 常用脚本</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;scripts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;start&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;node index.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;dev&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;nodemon index.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;build&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;webpack --mode production&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;test&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;jest&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;lint&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;eslint . --ext .js,.jsx&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;prepublishOnly&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;npm run build&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;postinstall&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;npx prisma generate&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="dependencies" tabindex="-1"><code>dependencies</code> <a class="header-anchor" href="#dependencies" aria-label="Permalink to &quot;\`dependencies\`&quot;">​</a></h2><p>生产环境中必需的包，被项目直接使用。</p><h2 id="devdependencies" tabindex="-1"><code>devDependencies</code> <a class="header-anchor" href="#devdependencies" aria-label="Permalink to &quot;\`devDependencies\`&quot;">​</a></h2><p>仅在开发时用到的依赖包。安装时一般后缀加上<code>-dev</code></p><h2 id="peerdependencies" tabindex="-1"><code>peerDependencies</code> <a class="header-anchor" href="#peerdependencies" aria-label="Permalink to &quot;\`peerDependencies\`&quot;">​</a></h2><p>声明当前包需要宿主环境提供的依赖（常用于插件库）在项目中不起作用。 开发时一般会配合 devDependencies 来实现开发和发包时的版本解耦。</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;peerDependencies&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;react&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;16 || 17 || 18&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // or react: &quot;&gt;=16.8.0&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;devDependencies&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;react&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;16&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="optionaldependencies" tabindex="-1"><code>optionalDependencies</code> <a class="header-anchor" href="#optionaldependencies" aria-label="Permalink to &quot;\`optionalDependencies\`&quot;">​</a></h2><p>定义可选依赖项，和 dependencies 非常类似，主要的差别： 在 optionalDependencies 中的依赖包安装报错甚至找不到时不会影响到包管理器的安装行为。</p><h2 id="engines" tabindex="-1"><code>engines</code> <a class="header-anchor" href="#engines" aria-label="Permalink to &quot;\`engines\`&quot;">​</a></h2><p>指定项目运行所需的 Node.js/npm 版本范围</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;engines&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;node&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&gt;=16.0.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;npm&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&gt;=8.0.0&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="bin" tabindex="-1"><code>bin</code> <a class="header-anchor" href="#bin" aria-label="Permalink to &quot;\`bin\`&quot;">​</a></h2><p>定义全局可执行命令（CLI 工具）。用于将你包中的某个JavaScript文件注册为全局可执行命令。</p><p>🌰</p><ol><li>在项目目录新建文件/bin/hello.js并编写</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#!/usr/bin/env node</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 第一行是 shebang，告诉系统这是一个 Node.js 脚本（重要！）</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;hello world ~&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><ol start="2"><li>修改 package.json</li></ol><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;bin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./bin/hello.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>或者简写形式：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;bin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./bin/hello.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ol start="3"><li>此包发布之后，安装之后，可直接终端执行 <code>hello</code>，将输出 <code>hello world ~</code>。</li></ol><h2 id="private" tabindex="-1"><code>private</code> <a class="header-anchor" href="#private" aria-label="Permalink to &quot;\`private\`&quot;">​</a></h2><p>是否私有，为true时将不允许发布到npm。</p><p><a href="https://docs.npmjs.com/cli/v10/configuring-npm/package-json" target="_blank" rel="noreferrer">官方文档(英文)</a></p><h2 id="npm-常见命令" tabindex="-1">npm 常见命令 <a class="header-anchor" href="#npm-常见命令" aria-label="Permalink to &quot;npm 常见命令&quot;">​</a></h2><h3 id="npm-link" tabindex="-1">npm link <a class="header-anchor" href="#npm-link" aria-label="Permalink to &quot;npm link&quot;">​</a></h3><p>可以让你在本地写的模块，在别的项目里直接使用，就像已经在当前项目里安装了一样。</p><p>举例：</p><p>本地有两个项目：<code>utils-project</code>和<code>app-project</code>。</p><ol><li>在<code>utils-project</code>中执行 <code>npm link</code></li><li>在<code>app-project</code>中执行 <code>npm link utils-project</code></li></ol><p>在app项目里可以直接使用utils-project中的方法，<strong>且会自动更新</strong>。</p><p>发布的时候记得 <code>unlink</code></p><h3 id="其他" tabindex="-1">其他 <a class="header-anchor" href="#其他" aria-label="Permalink to &quot;其他&quot;">​</a></h3><table tabindex="0"><thead><tr><th>命令</th><th>作用</th><th>示例</th><th>说明</th></tr></thead><tbody><tr><td><code>npm config list</code></td><td>查看当前 npm 的所有配置（全局 + 项目级）</td><td><code>npm config list</code></td><td>显示 registry、cache、prefix、user-agent 等全部配置项，可用于排查安装问题</td></tr><tr><td><code>npm config get &lt;key&gt;</code></td><td>获取指定配置项的值</td><td><code>npm config get registry</code></td><td>输出如：<code>https://registry.npmmirror.com</code><br>常用于确认镜像源是否生效</td></tr><tr><td><code>npm config set &lt;key&gt; &lt;value&gt;</code></td><td>设置指定配置项</td><td><code>npm config set registry https://registry.npmmirror.com</code></td><td>常用于切换国内镜像加速下载<br>等价于修改 <code>~/.npmrc</code> 文件</td></tr><tr><td><code>npm ls</code></td><td>查看项目依赖树（完整结构）</td><td><code>npm ls</code></td><td>展示所有包及其嵌套依赖层级<br>可加 <code>--depth=0</code> 只显示顶层依赖</td></tr><tr><td><code>npm ls &lt;package-name&gt;</code></td><td>检查某个依赖是否已安装及版本</td><td><code>npm ls lodash</code></td><td>若未安装：<code>empty</code><br>若已安装：显示版本号和路径<br>推荐用于排查“幽灵依赖”或缺失包</td></tr><tr><td><code>npm install --legacy-peer-deps</code></td><td>安装依赖时忽略 peerDependencies 冲突</td><td><code>npm install --legacy-peer-deps</code></td><td>解决因 peer 版本不兼容导致的安装失败<br>适用于旧项目或第三方库兼容性问题<br>⚠️ 不是长期解决方案，建议修复版本约束</td></tr><tr><td><code>npm view &lt;package&gt; [field]</code></td><td>查看包的元信息（如版本、作者、依赖等）</td><td><code>npm view react version</code><br><code>npm view express versions</code></td><td><code>version</code>：最新版本<br><code>versions</code>：所有可用版本（数组）</td></tr></tbody></table><h2 id="幽灵依赖" tabindex="-1">幽灵依赖 <a class="header-anchor" href="#幽灵依赖" aria-label="Permalink to &quot;幽灵依赖&quot;">​</a></h2><div class="danger custom-block"><p class="custom-block-title">DANGER</p><p>你的项目没有在 package.json 中显式声明某个依赖包，但在代码中却能正常使用它 —— 因为它被其他依赖包&quot;间接安装&quot;了。</p><p>它是一个隐蔽但危险的陷阱。</p></div><p>比如：你在项目中使用到了 <code>lodash</code>，但是没有在 <code>package.json</code> 中声明（dependencies和devDependencies中没有lodash），但是存在<code>express</code>。</p><p>代码可以正常执行，因为express（比如v4.17.x）内部已经安装了lodash（node_modules中存在）。</p>`,49)]))}const E=i(n,[["render",p]]);export{c as __pageData,E as default};
