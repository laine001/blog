import{_ as a,c as n,ad as l,o as p}from"./chunks/framework.CUQRbRGK.js";const F=JSON.parse('{"title":"栈数据结构","description":"","frontmatter":{"title":"栈数据结构","date":"2020-03-25T20:56:38.000Z","tags":"数据结构"},"headers":[],"relativePath":"fe/js数据结构与算法笔记Ⅰ.md","filePath":"fe/js数据结构与算法笔记Ⅰ.md","lastUpdated":1729666820000}'),o={name:"fe/js数据结构与算法笔记Ⅰ.md"};function e(t,s,c,B,r,y){return p(),n("div",null,s[0]||(s[0]=[l(`<h3 id="栈是一种遵从先进后出原则的有序结合。" tabindex="-1">栈是一种遵从先进后出原则的有序结合。 <a class="header-anchor" href="#栈是一种遵从先进后出原则的有序结合。" aria-label="Permalink to &quot;栈是一种遵从先进后出原则的有序结合。&quot;">​</a></h3><blockquote><p>新添加的或待删除的元素都保存在栈的同一端，为栈顶，另一端则为栈底。且新元素都靠近栈顶，旧元素都接近栈底。 例：一摞书、堆起的盘子</p></blockquote><h4 id="创建一个类来表示栈" tabindex="-1">创建一个类来表示栈： <a class="header-anchor" href="#创建一个类来表示栈" aria-label="Permalink to &quot;创建一个类来表示栈：&quot;">​</a></h4><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> Stack</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 属性和方法</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre></div><h4 id="选择一种数据结构保存栈里的元素-这里选择数组" tabindex="-1">选择一种数据结构保存栈里的元素（这里选择数组）： <a class="header-anchor" href="#选择一种数据结构保存栈里的元素-这里选择数组" aria-label="Permalink to &quot;选择一种数据结构保存栈里的元素（这里选择数组）：&quot;">​</a></h4><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> items</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> []</span></span></code></pre></div><blockquote><p>声明一些需要用到的一些方法</p></blockquote><ul><li>push</li><li>pop</li><li>peek</li><li>isEmpty</li><li>clear</li><li>size</li></ul><ol><li>向栈中添加元素（只向栈中的末尾即栈顶添加）</li></ol><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">ele</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">    items</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">ele</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre></div><ol start="2"><li>移出栈中的元素（移出末尾即栈顶）</li></ol><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">pop</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E5C07B;"> items</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">pop</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre></div><ol start="3"><li>查看栈顶元素、检查栈是否为空、清空栈、打印栈元素</li></ol><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">peek</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E06C75;"> items</span><span style="color:#ABB2BF;">[</span><span style="color:#E5C07B;">items</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#56B6C2;"> -</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isEmpty</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E5C07B;"> item</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#56B6C2;"> ===</span><span style="color:#D19A66;"> 0</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">clear</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E06C75;">    items</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> []</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">print</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">items</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toString</span><span style="color:#ABB2BF;">())</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre></div><h4 id="使用stack类" tabindex="-1">使用Stack类 <a class="header-anchor" href="#使用stack类" aria-label="Permalink to &quot;使用Stack类&quot;">​</a></h4><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> stack</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Stack</span><span style="color:#ABB2BF;">() </span><span style="color:#7F848E;font-style:italic;">// []</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">stack</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isEmpty</span><span style="color:#ABB2BF;">()) </span><span style="color:#7F848E;font-style:italic;">// true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">stack</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// [2]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">stack</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">peek</span><span style="color:#ABB2BF;">() </span><span style="color:#7F848E;font-style:italic;">// 2</span></span></code></pre></div><h4 id="es6改造此类" tabindex="-1">es6改造此类 <a class="header-anchor" href="#es6改造此类" aria-label="Permalink to &quot;es6改造此类&quot;">​</a></h4><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Stack</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    constructor</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">items</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> []</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#61AFEF;">    push</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">ele</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">items</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">ele</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">    ...</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre></div><blockquote><p>es6创建的类基于原型，比基于函数的节省内存，更适合创建多个实例。但是不能声明私有属性，此处的items是公共的。</p></blockquote><h4 id="再改造-利用es6的限定作用域symbol实现" tabindex="-1">再改造（利用es6的限定作用域Symbol实现） <a class="header-anchor" href="#再改造-利用es6的限定作用域symbol实现" aria-label="Permalink to &quot;再改造（利用es6的限定作用域Symbol实现）&quot;">​</a></h4><blockquote><p>es6新增的Symbol的基本类型，不可变，可以用作对象的属性</p></blockquote><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> _items</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> Symbol</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Stack</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    constructor</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">_items</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> []</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#61AFEF;">    push</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">ele</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">_items</span><span style="color:#ABB2BF;">].</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">ele</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">    ...</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre></div><blockquote><p>缺点: _items属性是个数组，可以进行任意的数组操作，例如从中间删除和添加。栈中不该有这种行为</p></blockquote><h4 id="再次改造-weakmap数据类型-可确保属性是私有的" tabindex="-1">再次改造（WeakMap数据类型）（可确保属性是私有的） <a class="header-anchor" href="#再次改造-weakmap数据类型-可确保属性是私有的" aria-label="Permalink to &quot;再次改造（WeakMap数据类型）（可确保属性是私有的）&quot;">​</a></h4><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> items</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> WeakMap</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Stack</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    constructor</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">        items</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">set</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">, [])</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#61AFEF;">    push</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">ele</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">        let</span><span style="color:#E06C75;"> s</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> items</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E5C07B;">        s</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">ele</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#61AFEF;">    pop</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">        let</span><span style="color:#E06C75;"> s</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> items</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">        let</span><span style="color:#E06C75;"> r</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> s</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">pop</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#E06C75;"> r</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">    ...</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 利用闭包把stack类包起来</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> stack</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#E5C07B;"> items</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> WeakMap</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#C678DD;">    class</span><span style="color:#E5C07B;"> Stack</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        constructor</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">            items</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">set</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">,  [])</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">    ... </span><span style="color:#7F848E;font-style:italic;">// 其他方法</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E06C75;"> Stack</span></span>
<span class="line"><span style="color:#ABB2BF;">})()</span></span></code></pre></div>`,25)]))}const A=a(o,[["render",e]]);export{F as __pageData,A as default};
